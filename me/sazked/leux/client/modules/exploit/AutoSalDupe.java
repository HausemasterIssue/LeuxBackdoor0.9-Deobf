// 
// Decompiled by Procyon v0.5.36
// 

package me.sazked.leux.client.modules.exploit;

import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.block.BlockChest;
import net.minecraft.item.ItemBlock;
import net.minecraft.util.EnumHand;
import net.minecraft.entity.passive.AbstractChestHorse;
import java.util.function.Function;
import java.util.Comparator;
import net.minecraft.entity.Entity;
import org.lwjgl.input.Keyboard;
import net.minecraft.item.ItemStack;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.ClickType;
import net.minecraft.item.ItemShulkerBox;
import net.minecraft.init.Items;
import java.util.function.Predicate;
import me.sazked.leux.client.modules.Category;
import net.minecraft.client.gui.inventory.GuiScreenHorseInventory;
import me.sazked.leux.client.util.Timer;
import me.sazked.leux.client.guiscreen.settings.Setting;
import net.minecraftforge.event.entity.EntityJoinWorldEvent;
import me.zero.alpine.fork.listener.EventHandler;
import me.sazked.leux.client.event.events.EventMove;
import me.zero.alpine.fork.listener.Listener;
import me.sazked.leux.client.modules.Module;

public class AutoSalDupe extends Module
{
    @EventHandler
    public Listener<EventMove> updateListener;
    @EventHandler
    public Listener<EntityJoinWorldEvent> OnWorldEvent;
    public boolean doSneak;
    public Setting hitGround;
    public int itemsDropped;
    public int itemsToDupe;
    public Setting Delay;
    public boolean grounded;
    public boolean doChest;
    public Timer timer;
    public Setting shulkerOnly;
    public boolean start;
    public boolean finished;
    public GuiScreenHorseInventory l_Chest;
    public boolean noBypass;
    public int itemsMoved;
    public boolean doDrop;
    
    public void lambda$new$2(final EntityJoinWorldEvent obf) {
        if (obf.getEntity() == AutoSalDupe.mc.player) {
            this.toggle();
        }
    }
    
    public AutoSalDupe() {
        super(Category.exploit);
        this.shulkerOnly = this.create("OnlyShulkers", "AutoDupeShulkerOnly", true);
        this.hitGround = this.create("GroundCheck", "AutoDupeGround", true);
        this.Delay = this.create("Delay", "AutoDupeDelay", Double.longBitsToDouble(Double.doubleToLongBits(11.72063917416103) ^ 0x7FDF211C1B34C1B7L), Double.longBitsToDouble(Double.doubleToLongBits(13.170106655473292) ^ 0x7FE9642B0B071EC2L), Double.longBitsToDouble(Double.doubleToLongBits(0.21340226377518232) ^ 0x7FEF50C3EFE7445BL));
        this.doDrop = false;
        this.doChest = false;
        this.doSneak = false;
        this.start = false;
        this.finished = false;
        this.grounded = false;
        this.timer = new Timer();
        this.noBypass = false;
        this.updateListener = new Listener<EventMove>(this::lambda$new$1, (Predicate<EventMove>[])new Predicate[0]);
        this.OnWorldEvent = new Listener<EntityJoinWorldEvent>(this::lambda$new$2, (Predicate<EntityJoinWorldEvent>[])new Predicate[0]);
        this.name = "AutoSalDupe";
        this.tag = "AutoSalDupe";
        this.description = "performs the salc1 treemc dupe automatically";
    }
    
    public void HandleStoring(final int n, final int n2) {
        for (int i = 9; i < AutoSalDupe.mc.player.inventoryContainer.inventorySlots.size() - 1; ++i) {
            final ItemStack stack = AutoSalDupe.mc.player.inventoryContainer.getSlot(i).getStack();
            if (!stack.isEmpty() && stack.getItem() != Items.AIR && (stack.getItem() instanceof ItemShulkerBox || !this.shulkerOnly.get_value(true))) {
                AutoSalDupe.mc.playerController.windowClick(n, i + n2, 0, ClickType.QUICK_MOVE, (EntityPlayer)AutoSalDupe.mc.player);
                return;
            }
        }
    }
    
    public void lambda$new$1(final EventMove obf) {
        if (Keyboard.isKeyDown(1)) {
            this.toggle();
            return;
        }
        if (this.finished) {
            this.finished = false;
            this.itemsMoved = 0;
            this.itemsDropped = 0;
            this.start = true;
            return;
        }
        if (!this.timer.passed(this.Delay.get_value(0) * Float.intBitsToFloat(Float.floatToIntBits(0.06648854f) ^ 0x7F402B25))) {
            return;
        }
        this.timer.reset();
        if (this.doSneak) {
            if (!AutoSalDupe.mc.player.isSneaking()) {
                AutoSalDupe.mc.gameSettings.keyBindSneak.pressed = true;
                return;
            }
            AutoSalDupe.mc.gameSettings.keyBindSneak.pressed = false;
            this.doSneak = false;
            if (!this.hitGround.get_value(true)) {
                this.finished = true;
            }
            else {
                this.grounded = true;
            }
        }
        else {
            if (this.grounded && AutoSalDupe.mc.player.onGround) {
                this.grounded = false;
                this.finished = true;
                return;
            }
            if (this.start) {
                if (this.is_active()) {
                    this.itemsToDupe = 0;
                    this.itemsMoved = 0;
                    final Entity obf2 = (Entity)AutoSalDupe.mc.world.loadedEntityList.stream().filter(this::isValidEntity).min(Comparator.comparing((Function<? super T, ? extends Comparable>)AutoSalDupe::lambda$null$0)).orElse(null);
                    if (obf2 instanceof AbstractChestHorse) {
                        final AbstractChestHorse obf3 = (AbstractChestHorse)obf2;
                        if (!obf3.hasChest()) {
                            final int obf4 = this.getChestInHotbar();
                            if (obf4 != -1 && AutoSalDupe.mc.player.inventory.currentItem != obf4) {
                                AutoSalDupe.mc.player.inventory.currentItem = obf4;
                                AutoSalDupe.mc.playerController.updateController();
                                AutoSalDupe.mc.playerController.interactWithEntity((EntityPlayer)AutoSalDupe.mc.player, (Entity)obf3, EnumHand.MAIN_HAND);
                            }
                            else {
                                if (AutoSalDupe.mc.player.inventory.currentItem != obf4) {
                                    this.toggle();
                                    return;
                                }
                                AutoSalDupe.mc.playerController.interactWithEntity((EntityPlayer)AutoSalDupe.mc.player, (Entity)obf3, EnumHand.MAIN_HAND);
                            }
                        }
                        this.start = false;
                        AutoSalDupe.mc.playerController.interactWithEntity((EntityPlayer)AutoSalDupe.mc.player, (Entity)obf3, EnumHand.MAIN_HAND);
                        AutoSalDupe.mc.player.sendHorseInventory();
                        this.doChest = true;
                    }
                }
            }
            if (this.doChest && !(AutoSalDupe.mc.currentScreen instanceof GuiScreenHorseInventory)) {
                this.doChest = false;
                this.start = true;
                return;
            }
            if (AutoSalDupe.mc.currentScreen instanceof GuiScreenHorseInventory) {
                this.l_Chest = (GuiScreenHorseInventory)AutoSalDupe.mc.currentScreen;
                this.itemsToDupe = this.getItemsToDupe();
                for (int obf5 = 2; obf5 < this.l_Chest.horseInventory.getSizeInventory() + 1; ++obf5) {
                    final ItemStack obf6 = this.l_Chest.horseInventory.getStackInSlot(obf5);
                    if (this.itemsToDupe == 0 || this.itemsMoved == this.l_Chest.horseInventory.getSizeInventory() - 2) {
                        if (this.doChest) {
                            break;
                        }
                    }
                    if (this.itemsDropped >= this.itemsMoved && this.doDrop) {
                        break;
                    }
                    if ((obf6.isEmpty() || obf6.getItem() == Items.AIR) && this.doChest) {
                        this.HandleStoring(this.l_Chest.inventorySlots.windowId, this.l_Chest.horseInventory.getSizeInventory() - 9);
                        --this.itemsToDupe;
                        this.itemsMoved = this.getItemsInRidingEntity();
                        return;
                    }
                    if (!this.doChest && (!this.shulkerOnly.get_value(true) || obf6.getItem() instanceof ItemShulkerBox) && !obf6.isEmpty() && this.doDrop) {
                        if (this.canStore()) {
                            AutoSalDupe.mc.playerController.windowClick(AutoSalDupe.mc.player.openContainer.windowId, obf5, 0, ClickType.QUICK_MOVE, (EntityPlayer)AutoSalDupe.mc.player);
                        }
                        else {
                            AutoSalDupe.mc.playerController.windowClick(this.l_Chest.inventorySlots.windowId, obf5, -999, ClickType.THROW, (EntityPlayer)AutoSalDupe.mc.player);
                        }
                        ++this.itemsDropped;
                        return;
                    }
                }
                if (this.doChest) {
                    this.doChest = false;
                    this.doDupe();
                    return;
                }
                if (this.doDrop) {
                    this.doDrop = false;
                    AutoSalDupe.mc.player.closeScreen();
                    AutoSalDupe.mc.gameSettings.keyBindSneak.pressed = true;
                    this.doSneak = true;
                }
            }
        }
    }
    
    public boolean isValidEntity(final Entity entity) {
        if (entity instanceof AbstractChestHorse) {
            final AbstractChestHorse abstractChestHorse = (AbstractChestHorse)entity;
            return !abstractChestHorse.isChild() && abstractChestHorse.isTame();
        }
        return false;
    }
    
    public int getChestInHotbar() {
        for (int i = 0; i < 9; ++i) {
            final ItemStack stackInSlot = AutoSalDupe.mc.player.inventory.getStackInSlot(i);
            if (stackInSlot != ItemStack.EMPTY && stackInSlot.getItem() instanceof ItemBlock && ((ItemBlock)stackInSlot.getItem()).getBlock() instanceof BlockChest) {
                return i;
            }
        }
        return -1;
    }
    
    public boolean ignoreMountBypass() {
        return this.noBypass;
    }
    
    public int getItemsToDupe() {
        int n = 0;
        for (int i = 9; i < AutoSalDupe.mc.player.inventoryContainer.inventorySlots.size() - 1; ++i) {
            final ItemStack stack = AutoSalDupe.mc.player.inventoryContainer.getSlot(i).getStack();
            if (!stack.isEmpty()) {
                if (stack.getItem() != Items.AIR) {
                    if (stack.getItem() instanceof ItemShulkerBox || !this.shulkerOnly.get_value(true)) {
                        ++n;
                    }
                }
            }
        }
        if (n > this.l_Chest.horseInventory.getSizeInventory() - 1) {
            n = this.l_Chest.horseInventory.getSizeInventory() - 1;
        }
        return n;
    }
    
    public int getItemsInRidingEntity() {
        int n = 0;
        for (int i = 2; i < this.l_Chest.horseInventory.getSizeInventory() + 1; ++i) {
            final ItemStack stackInSlot = this.l_Chest.horseInventory.getStackInSlot(i);
            if (!stackInSlot.isEmpty()) {
                if (stackInSlot.getItem() != Items.AIR) {
                    ++n;
                }
            }
        }
        return n;
    }
    
    @Override
    public void disable() {
        super.disable();
        this.noBypass = false;
        this.doDrop = false;
        this.doChest = false;
        this.doSneak = false;
        this.start = false;
        this.finished = false;
        this.grounded = false;
        this.itemsToDupe = 0;
        this.itemsMoved = 0;
        this.itemsDropped = 0;
        this.timer.reset();
    }
    
    public boolean canStore() {
        int i = 9;
        while (i < AutoSalDupe.mc.player.inventoryContainer.inventorySlots.size() - 1) {
            final ItemStack stack = AutoSalDupe.mc.player.inventoryContainer.getSlot(i).getStack();
            if (!stack.isEmpty()) {
                if (stack.getItem() != Items.AIR) {
                    ++i;
                    continue;
                }
            }
            return true;
        }
        return false;
    }
    
    public static Float lambda$null$0(final Entity entity) {
        return AutoSalDupe.mc.player.getDistance(entity);
    }
    
    public void doDupe() {
        this.noBypass = true;
        final Entity obf = (Entity)AutoSalDupe.mc.world.loadedEntityList.stream().filter(this::isValidEntity).min(Comparator.comparing((Function<? super T, ? extends Comparable>)AutoSalDupe::lambda$doDupe$3)).orElse(null);
        if (obf instanceof AbstractChestHorse) {
            AutoSalDupe.mc.player.connection.sendPacket((Packet)new CPacketUseEntity(obf, EnumHand.MAIN_HAND, obf.getPositionVector()));
            this.noBypass = false;
            this.doDrop = true;
        }
    }
    
    @Override
    public void enable() {
        super.enable();
        this.timer.reset();
        this.start = true;
    }
    
    public static Float lambda$doDupe$3(final Entity entity) {
        return AutoSalDupe.mc.player.getDistance(entity);
    }
}
