// 
// Decompiled by Procyon v0.5.36
// 

package me.sazked.leux.client.modules.exploit;

import net.minecraft.util.math.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.RayTraceResult;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import net.minecraft.entity.EntityLivingBase;
import me.sazked.leux.client.modules.Category;
import net.minecraft.entity.Entity;
import me.sazked.leux.client.modules.Module;

public class EntityMine extends Module
{
    public boolean focus;
    
    public static boolean lambda$update$1(final Entity entity) {
        return EntityMine.mc.player == entity;
    }
    
    public EntityMine() {
        super(Category.exploit);
        this.focus = false;
        this.name = "Entity Mine";
        this.tag = "EntityMine";
        this.description = "mine through stuff";
    }
    
    public static boolean lambda$update$3(final EntityLivingBase obf) {
        return !obf.isDead;
    }
    
    @Override
    public void update() {
        EntityMine.mc.world.loadedEntityList.stream().filter(EntityMine::lambda$update$0).filter(EntityMine::lambda$update$1).map(EntityMine::lambda$update$2).filter(EntityMine::lambda$update$3).forEach(this::process);
        final RayTraceResult obf = EntityMine.mc.objectMouseOver;
        if (obf != null) {
            this.focus = (obf.typeOfHit == RayTraceResult.Type.ENTITY);
        }
    }
    
    public void process(final EntityLivingBase obf) {
        final RayTraceResult obf2 = obf.rayTrace(Double.longBitsToDouble(Double.doubleToLongBits(0.17620547860744737) ^ 0x7FDE8DE6AFFF5C9FL), EntityMine.mc.getRenderPartialTicks());
        if (obf2 != null && this.focus && obf2.typeOfHit == RayTraceResult.Type.BLOCK) {
            final BlockPos obf3 = obf2.getBlockPos();
            if (EntityMine.mc.gameSettings.keyBindAttack.isKeyDown()) {
                EntityMine.mc.playerController.onPlayerDamageBlock(obf3, EnumFacing.UP);
            }
        }
    }
    
    public static boolean lambda$update$0(final Entity entity) {
        return entity instanceof EntityLivingBase;
    }
    
    public static EntityLivingBase lambda$update$2(final Entity obf) {
        return (EntityLivingBase)obf;
    }
}
