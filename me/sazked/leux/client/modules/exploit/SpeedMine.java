// 
// Decompiled by Procyon v0.5.36
// 

package me.sazked.leux.client.modules.exploit;

import net.minecraft.util.EnumHand;
import net.minecraft.network.Packet;
import net.minecraft.init.Blocks;
import net.minecraft.world.World;
import java.util.Iterator;
import net.minecraft.entity.item.EntityEnderCrystal;
import net.minecraft.entity.Entity;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketAnimation;
import java.util.function.Predicate;
import me.sazked.leux.client.modules.Category;
import me.sazked.leux.client.util.Timer;
import me.sazked.leux.client.event.events.EventBlock;
import net.minecraft.block.state.IBlockState;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import me.sazked.leux.client.guiscreen.settings.Setting;
import me.zero.alpine.fork.listener.EventHandler;
import me.sazked.leux.client.event.events.EventPacket;
import me.zero.alpine.fork.listener.Listener;
import me.sazked.leux.client.modules.Module;

public class SpeedMine extends Module
{
    @EventHandler
    public Listener<EventPacket.SendPacket> send_listener;
    public Setting reset;
    public BlockPos last_pos;
    public Setting damage;
    public EnumFacing last_facing;
    public IBlockState current_block_state;
    public Setting allow;
    public BlockPos current_pos;
    public Setting double_break;
    public boolean is_mining;
    @EventHandler
    public Listener<EventBlock> block_event;
    public Setting no_delay;
    public Setting no_break_anim;
    public Timer timer;
    public Setting mode;
    public Setting no_swing;
    
    @Override
    public String array_detail() {
        return this.mode.get_current_value();
    }
    
    public void show_anim() {
        this.show_anim(false, null, null);
    }
    
    public SpeedMine() {
        super(Category.exploit);
        this.mode = this.create("Mode", "SpeedmineMode", "Damage", this.combobox("Normal", "Packet", "Damage", "Instant"));
        this.damage = this.create("Damage Ammount", "SpeedmineDamagaeAmmount", Double.longBitsToDouble(Double.doubleToLongBits(18.955101253600116) ^ 0x7FD492E7E26EF2A5L), Double.longBitsToDouble(Double.doubleToLongBits(1.4994271634695003E308) ^ 0x7FEAB0D1067BD3C8L), Double.longBitsToDouble(Double.doubleToLongBits(10.725073316553702) ^ 0x7FD5733CCF4B99CFL));
        this.reset = this.create("Reset", "SpeedmineReset", true);
        this.no_break_anim = this.create("No Break Anim", "SpeedMineBreakAnim", false);
        this.no_delay = this.create("No Delay", "SpeedmineNoDelay", false);
        this.no_swing = this.create("No Swing", "SpeedmineNoSwing", false);
        this.allow = this.create("MultiTask", "SpeedmineMultiTask", false);
        this.double_break = this.create("Double Break", "SpeedmineDoubleBreak", false);
        this.timer = new Timer();
        this.current_block_state = null;
        this.current_pos = null;
        this.last_pos = null;
        this.last_facing = null;
        this.is_mining = false;
        this.send_listener = new Listener<EventPacket.SendPacket>(this::lambda$new$0, (Predicate<EventPacket.SendPacket>[])new Predicate[0]);
        this.block_event = new Listener<EventBlock>(this::lambda$new$1, (Predicate<EventBlock>[])new Predicate[0]);
        this.name = "Speed Mine";
        this.tag = "SpeedMine";
        this.description = "instamine";
    }
    
    public void lambda$new$0(final EventPacket.SendPacket obf) {
        if (this.no_swing.get_value(true) && obf.get_packet() instanceof CPacketAnimation) {
            obf.cancel();
        }
        if (this.no_break_anim.get_value(true)) {
            if (obf.get_packet() instanceof CPacketPlayerDigging) {
                final CPacketPlayerDigging obf2 = (CPacketPlayerDigging)obf.get_packet();
                try {
                    for (final Entity obf3 : SpeedMine.mc.world.getEntitiesWithinAABBExcludingEntity((Entity)null, new AxisAlignedBB(obf2.getPosition()))) {
                        if (obf3 instanceof EntityEnderCrystal) {
                            this.show_anim();
                            return;
                        }
                    }
                }
                catch (Exception ex) {}
                if (obf2.getAction().equals((Object)CPacketPlayerDigging.Action.START_DESTROY_BLOCK)) {
                    this.show_anim(true, obf2.getPosition(), obf2.getFacing());
                }
                if (obf2.getAction().equals((Object)CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK)) {
                    this.show_anim();
                }
            }
        }
    }
    
    public static boolean canBreak(final BlockPos blockPos) {
        final IBlockState blockState = SpeedMine.mc.world.getBlockState(blockPos);
        return blockState.getBlock().getBlockHardness(blockState, (World)SpeedMine.mc.world, blockPos) != -1.0f;
    }
    
    @Override
    public void update() {
        if (this.current_pos != null) {
            if (!SpeedMine.mc.world.getBlockState(this.current_pos).equals(this.current_block_state) || SpeedMine.mc.world.getBlockState(this.current_pos).getBlock() == Blocks.AIR) {
                this.current_pos = null;
                this.current_block_state = null;
            }
        }
        if (this.no_delay.get_value(true)) {
            SpeedMine.mc.playerController.blockHitDelay = 0;
        }
        if (this.is_mining && this.last_pos != null && this.last_facing != null && this.no_break_anim.get_value(true)) {
            SpeedMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.ABORT_DESTROY_BLOCK, this.last_pos, this.last_facing));
        }
        if (this.reset.get_value(true)) {
            if (SpeedMine.mc.gameSettings.keyBindUseItem.isKeyDown() && !this.allow.get_value(true)) {
                SpeedMine.mc.playerController.isHittingBlock = false;
            }
        }
    }
    
    public void lambda$new$1(final EventBlock obf) {
        if (obf.get_stage() == 3 && this.reset.get_value(true) && SpeedMine.mc.playerController.curBlockDamageMP > Float.intBitsToFloat(Float.floatToIntBits(313.46295f) ^ 0x7E50778F)) {
            SpeedMine.mc.playerController.isHittingBlock = true;
        }
        if (obf.get_stage() == 4) {
            if (!this.mode.in("Normal")) {
                if (canBreak(obf.pos)) {
                    if (this.reset.get_value(true)) {
                        SpeedMine.mc.playerController.isHittingBlock = false;
                    }
                    if (this.mode.in("Packet")) {
                        if (this.current_pos == null) {
                            this.current_pos = obf.pos;
                            this.current_block_state = SpeedMine.mc.world.getBlockState(this.current_pos);
                            this.timer.reset();
                        }
                        SpeedMine.mc.player.swingArm(EnumHand.MAIN_HAND);
                        SpeedMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, obf.pos, obf.facing));
                        SpeedMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, obf.pos, obf.facing));
                        obf.cancel();
                    }
                    if (this.mode.in("Damage") && SpeedMine.mc.playerController.curBlockDamageMP >= this.damage.get_value(1)) {
                        SpeedMine.mc.playerController.curBlockDamageMP = Float.intBitsToFloat(Float.floatToIntBits(4.7988443f) ^ 0x7F199022);
                    }
                    if (this.mode.in("Instant")) {
                        SpeedMine.mc.player.swingArm(EnumHand.MAIN_HAND);
                        SpeedMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, obf.pos, obf.facing));
                        SpeedMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, obf.pos, obf.facing));
                        SpeedMine.mc.playerController.onPlayerDestroyBlock(obf.pos);
                        SpeedMine.mc.world.setBlockToAir(obf.pos);
                    }
                }
                if (this.double_break.get_value(true)) {
                    final BlockPos obf2 = obf.pos.up();
                    if (canBreak(obf2) && SpeedMine.mc.player.getDistance((double)obf2.getX(), (double)obf2.getY(), (double)obf2.getZ()) <= Double.longBitsToDouble(Double.doubleToLongBits(0.12631802361749803) ^ 0x7FD42B30622A8FADL)) {
                        SpeedMine.mc.player.swingArm(EnumHand.MAIN_HAND);
                        SpeedMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, obf2, obf.facing));
                        SpeedMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, obf2, obf.facing));
                        SpeedMine.mc.playerController.onPlayerDestroyBlock(obf2);
                        SpeedMine.mc.world.setBlockToAir(obf2);
                    }
                }
            }
        }
    }
    
    public void show_anim(final boolean obf, final BlockPos obf, final EnumFacing obf) {
        this.is_mining = obf;
        this.last_pos = obf;
        this.last_facing = obf;
    }
}
